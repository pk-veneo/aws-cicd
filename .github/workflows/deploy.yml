name: Serverless CI/CD to AWS Lambda

on:
  push:
    branches: [main, qa, dev]
  pull_request:
    branches: [main, qa, dev]

permissions:
  id-token: write
  contents: read

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: dev
    env:
      AWS_DEFAULT_REGION: ap-south-1
      AWS_REGION: ap-south-1
      ACCOUNT_ID: ${{ vars.DEV_ACCOUNT_ID }}
      GITHUB_ACTIONS_ROLE: ${{ vars.DEV_ROLE }}
      ENVIRONMENT: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt

      - name: Run tests
        run: |
          echo "Running tests..."
          python -m pytest tests/ -v || echo "No tests found"

      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli
          sam --version

      - name: Build SAM application
        run: |
          sam build --template-file template.yaml

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.GITHUB_ACTIONS_ROLE }}
          aws-region: ap-south-1

      - name: Deploy to dev
        run: |
          sam deploy \
            --template-file template.yaml \
            --stack-name ServerlessEnterpriseStack-${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Test dev API
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ServerlessEnterpriseStack-${{ env.ENVIRONMENT }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          echo "dev API Gateway URL: $API_URL"
          if [ ! -z "$API_URL" ]; then
            echo "Testing enterprise endpoint..."
            curl -f "$API_URL/api/enterprise" || echo "dev enterprise API test failed"
            echo "Testing workday endpoint..."
            curl -f -X POST "$API_URL/api/workday" -H "Content-Type: application/json" -d '{"test": true}' || echo "dev workday API test failed"
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Successfully deployed to dev environment"
          echo "üåê API URL: $API_URL"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to dev failed"
          echo "üîç Check CloudWatch logs for details"

  deploy-qa:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/qa'
    environment: qa
    env:
      AWS_DEFAULT_REGION: ap-south-1
      AWS_REGION: ap-south-1
      ACCOUNT_ID: ${{ vars.QA_ACCOUNT_ID }}
      GITHUB_ACTIONS_ROLE: ${{ vars.QA_ROLE }}
      ENVIRONMENT: qa

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt

      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli
          sam --version

      - name: Build SAM application
        run: |
          sam build --template-file template.yaml

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.GITHUB_ACTIONS_ROLE }}
          aws-region: ap-south-1

      - name: Deploy to qa
        run: |
          sam deploy \
            --template-file template.yaml \
            --stack-name ServerlessEnterpriseStack-${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

  deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod
    env:
      AWS_DEFAULT_REGION: ap-south-1
      AWS_REGION: ap-south-1
      ACCOUNT_ID: ${{ vars.PROD_ACCOUNT_ID }}
      GITHUB_ACTIONS_ROLE: ${{ vars.PROD_ROLE }}
      ENVIRONMENT: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt

      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli
          sam --version

      - name: Build SAM application
        run: |
          sam build --template-file template.yaml

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.GITHUB_ACTIONS_ROLE }}
          aws-region: ap-south-1

      - name: Deploy to prod
        run: |
          sam deploy \
            --template-file template.yaml \
            --stack-name ServerlessEnterpriseStack-${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset 